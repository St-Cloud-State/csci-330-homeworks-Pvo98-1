Script started on 2025-02-19 06:36:46+00:00 [TERM="xterm-256color" TTY="/dev/pts/3" COLUMNS="180" LINES="29"]
[0;32m@Pvo98 [0mâžœ [1;34m/workspaces/csci-330-homeworks-Pvo98-1/HWork3 [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* 3 2 1 2 4 1 6             ;; Function to merge two sorted lists
(defun merge-sorted-lists (list1 list2)
  (cond ((null list1) list2)
        ((null list2) list1)
        ((< (car list1) (car list2))
         (cons (car list1) (merge-sorted-lists (cdr list1) list2)))
        (t
         (cons (car list2) (merge-sorted-lists list1 (cdr list2))))))

;; Function to sort a list 
MERGE-SORTED-LISTS
* using merge sort
(defun mergesort (lst)
  (cond ((null lst) nil)                    ; empty list
        ((null (cdr lst)) lst)              ; single element
        (t (let* ((partitioned (partition-list lst))
                  (left (car partitioned))
                  (right (cadr partitioned)))
             (merge-sorted-lists (mergesort left)    ; recursively sort left
                               (mergesort right)))))) ; recursively sort right

;; Function to partition a list into two su; in: DEFUN MERGESORT
;     (PARTITION-LIST LST)
; 
; caught STYLE-WARNING:
;   undefined function: PARTITION-LIST
; 
; compilation unit finished
;   Undefined function:
;     PARTITION-LIST
;   caught 1 STYLE-WARNING condition

MERGESORT
* blists
(defun partition-list (lst)
  (labels ((partition-step (unprocessed list1 list2)
            (cond ((null unprocessed) 
                   (list list1 list2))  ; Return both lists when no more items
                  ((null (cdr unprocessed))  ; Only one item left
                   (partition-step nil 
                                 (append list1 (list (car unprocessed)))
                                 list2))
                  (t  ; Two or more items - add to each list
                   (partition-step (cddr unprocessed)
                                 (append list1 (list (car unprocessed)))
                                 (append list2 (list (cadr unprocessed))))))))
    (format t "Starting partition of: ~a~%" lst)
    (let ((result (partition-step lst nil nil)))
      (format t "Partitioned into:~%List 1: ~a~%List 2: ~a~%~%" 
              (car result) (cadr result))
      result)))

PARTITION-LIST
* (mergesort '(32  2 1 2 4 1 6))
Starting partition of: (3 2 1 2 4 1 6)
Partitioned into:
List 1: (3 1 4 6)
List 2: (2 2 1)

Starting partition of: (3 1 4 6)
Partitioned into:
List 1: (3 4)
List 2: (1 6)

Starting partition of: (3 4)
Partitioned into:
List 1: (3)
List 2: (4)

Starting partition of: (1 6)
Partitioned into:
List 1: (1)
List 2: (6)

Starting partition of: (2 2 1)
Partitioned into:
List 1: (2 1)
List 2: (2)

Starting partition of: (2 1)
Partitioned into:
List 1: (2)
List 2: (1)

(1 1 2 2 3 4 6)
* e [0;32m@Pvo98 [0mâžœ [1;34m/workspaces/csci-330-homeworks-Pvo98-1/HWork3 [0;36m([1;31mmain[0;36m) [0m$ exit

Script done on 2025-02-19 06:37:42+00:00 [COMMAND_EXIT_CODE="0"]
