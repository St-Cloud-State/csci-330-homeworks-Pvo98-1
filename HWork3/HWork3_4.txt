Script started on 2025-02-19 08:41:43+00:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="180" LINES="29"]
[0;32m@Pvo98 [0mâžœ [1;34m/workspaces/csci-330-homeworks-Pvo98-1/HWork3 [0;36m([1;31mmain[0;36m) [0m$ sbcl
This is SBCL 1.4.3, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
* (defun insert-item (item sorted) 
(cond 
((null sorted) (list item)) ; If the sorted list is empty, return the item as the only element. 
((< item (car sorted)) (cons item sorted)) ; If the item is smaller than the first element, insert it at the front. 
(t (cons (car sorted) (insert-item item (cdr sorted)))))) ; recursively insert into the rest of the list. 

(defun insertion-sort (unsorted sorte
INSERT-ITEM
* d) 
(cond 
((null unsorted) sorted) ; If unsorted list is empty, return the sorted list. 
((null (cdr unsorted)) (insert-item (car unsorted) sorted)) ; If unsorted list has only one item, insert it into the Sorted List. 
(t (insertion-sort (cdr unsorted) (insert-item (car unsorted) sorted))))) ; Insert the first item into sorted list. 

(defun sort
INSERTION-SORT
* -list (lst) 
(insertion-sort lst nil)) ; Start sorting with an empty sorted list.

SORT-LIST
* (insertion-sort '(  1 3 6 9 5 7           6 2 8 3 4 4 6) '())

(1 2 3 4 4 6 6 8)
* [0;32m@Pvo98 [0mâžœ [1;34m/workspaces/csci-330-homeworks-Pvo98-1/HWork3 [0;36m([1;31mmain[0;36m) [0m$ exit

Script done on 2025-02-19 08:42:19+00:00 [COMMAND_EXIT_CODE="0"]
